---
# tasks file for kvm_provision
- name: Ensure requirements in place
  package:
    name:
      - guestfs-tools
      - libguestfs-tools
      - python3-libvirt
    state: present
  become: yes

- import_tasks: check_if_vm_exist.yml

- import_tasks: destroy_vm.yml
  when: drop_vm_frontend == true

- name: Create VM
  block:
    # - name: Delete existing image
    #   file:
    #     path: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
    #     state: absent
    - name: Download base image
      get_url:
        url: "{{ base_image_url }}"
        dest: "/tmp/{{ base_image_name }}"
        # checksum: "sha256:{{ base_image_sha }}"

    - name: Copy base image to libvirt directory
      copy:
        dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
        src: "/tmp/{{ base_image_name }}"
        force: no
        remote_src: yes
        mode: 0660
      register: copy_results

    - name: Create user sudoers file
      copy:
        dest: files/{{ vm_user }}_sudo
        content: |
          "{{ vm_user }}" ALL=(ALL) NOPASSWD: ALL
        mode: 0770
      register: sudoers_results

    - name: Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
        --hostname {{ vm_name }} \
        --root-password password:{{ vm_root_pass }} \
        --ssh-inject 'root:file:{{ ssh_key }}' \
        --run-command 'apt update && apt install openssh-server qemu-guest-agent -y && useradd -m -s /bin/bash {{ vm_user }} && usermod --password {{ vm_user_pass }} {{ vm_user }}'
        --ssh-inject '{{ vm_user }}:file:{{ ssh_key }}'
        --upload '{{ playbook_dir }}/files/{{ vm_user }}_sudo:/etc/sudoers.d/{{ vm_user }}_sudo'
        --run-command 'chmod 0440 /etc/sudoers.d/{{ vm_user }}_sudo'
        --selinux-relabel
      when: copy_results is changed

    - name: Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
    - name: Increase disk size
      ansible.builtin.shell: |
        sudo qemu-img resize {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 +{{ disk_size_vm }}
      become: true
      become_user: "{{ ansible_user }}"
      become_method: sudo

  when: vm_exists.stdout!="" or drop_vm_frontend == true

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Ensure temporary file is deleted
  file:
    path: "/tmp/{{ base_image_name }}"
    state: absent
  when: cleanup_tmp | bool

- name: Wait for the VM to have an IPv4 address
  command: "virsh domifaddr {{ vm_name }}"
  register: cmd_result
  retries: 60
  delay: 1
  until: cmd_result.stdout.find('ipv4') != -1

- name: get IP of the new VM
  shell: virsh net-dhcp-leases {{ net }} | grep {{ vm_name }} | awk '{ print $5}' | awk -F/ '{ print $1}'
  register: output_ip_address

- name: debug
  debug:
    msg: "{{ output_ip_address.stdout }}"

- name: Check if hosts file exists
  ansible.builtin.shell: 'find . -maxdepth 1 -type f -name "hosts" | wc -l'
  register: hosts_file_exists
  ignore_errors: yes

- name: Create hosts file if it does not exists
  copy:
    dest: ./hosts
    content: "[{{ hosts_group }}]\n"
  when: hosts_file_exists.stdout == "0"

- name: Check if hosts file contains the host already
  ansible.builtin.shell: 'grep "{{ vm_name }}" ./hosts'
  register: grep_result
  ignore_errors: yes
  failed_when: grep_result.rc != 0 and grep_result.rc != 1

- name: Replace host in inventory file
  ansible.builtin.lineinfile:
    path: ./hosts
    regexp: "^{{ vm_name }}.*$"
    line: "{{ vm_name }} ansible_host={{ output_ip_address.stdout }} ansible_ssh_private_key_file=/home/{{ ansible_user }}/{{ path_to_private_key }} ansible_python_interpreter=/usr/bin/python3"
    backrefs: yes
  when: grep_result.stdout != ""

- name: Add host to inventory file
  ansible.builtin.lineinfile:
    path: ./hosts
    line: "{{ vm_name }} ansible_host={{ output_ip_address.stdout }} ansible_ssh_private_key_file=/home/{{ ansible_user }}/{{ path_to_private_key }} ansible_python_interpreter=/usr/bin/python3"
    insertafter: '^(\[{{ hosts_group }}\])$'
    create: yes
  when: grep_result.stdout == "" or hosts_file_exists.stdout == "0"
